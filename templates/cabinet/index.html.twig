{% extends 'baseBack.html.twig' %}

{% block title %}Cabinet index{% endblock %}

{% block body %}
    <br>
    <h4><b>Liste des Cabinets</b></h4>
    <br>
    <input type="text" class="form-control" id="searchInput" placeholder="Search&hellip;"> 
    <br><br>
    <div class="rs-select2--light rs-select2--md bg-secondary rounded-pill" style="margin-left: 890px; margin-top: -15px; width: 200px;">
                        <select class="form-select rounded-pill bg-secondary text-light" name="sort" id="sortFilter">
                            <option value="">Sort by Codepostale</option>
                            <option value="asc"><i class="fas fa-arrow-up"></i> Lowest to Highest</option>
                            <option value="desc"><i class="fas fa-arrow-down"></i> Highest to Lowest</option>
                        </select>
    </div>
    <table class="table">
        <thead>
            <tr>
                <th>Nom</th>
                <th>Adresse</th>
                <th>Codepostal</th>
                <th>Adressemail</th>
                <th>Medecin</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
        {% for cabinet in cabinets %}
            <div  data-search="{{ cabinet.nom }} {{ cabinet.adresse }} {{ cabinet.idMedecin.nom }} {{ cabinet.adressemail }} data-salary="{{ cabinet.codepostal|lower }}"> 
            <tr>
                <td>{{ cabinet.nom }}</td>
                <td>{{ cabinet.adresse }}</td>
                <td>{{ cabinet.codepostal }}</td>
                <td>{{ cabinet.adressemail }}</td>
                <td>{{ cabinet.idMedecin.nom }}</td>
                <td>
                    <button class="btn btn-outline-secondary btn-sm"><a style="color:#000;" href="{{ path('app_cabinet_show', {'id': cabinet.id}) }}">Show</a></button>
                    <button class="btn btn-outline-info btn-sm"><a style="color:#000;" href="{{ path('app_cabinet_edit', {'id': cabinet.id}) }}">Edit</a></button>
                    <button class="btn btn-outline-danger btn-sm"><a style="color:#000;" href="{{ path('app_cabinet_pdf', {'id': cabinet.id}) }}">PDF</a></button>
                </td>
            </tr>
        {% else %}
            <tr>
                <td colspan="6">no records found</td>
            </tr>
        {% endfor %}
        </tbody>
    </table>

    <button class="btn btn-success"><a style="color:#000;" href="{{ path('app_cabinet_new') }}">Ajouter un Cabinet</a></button>
    <br></br>

    <div class="col-lg-12 grid-margin stretch-card">
        <div class="card">
            <div class="card-body">
                <h4 class="card-title">Statistiques des cabinets selon leurs nombre des rendez-vous</h4>
                <canvas id="myChart" style="width:100%;max-width:900px"></canvas>
            </div>
        </div>
    </div>


<script>
    function filterTable() {
        const filter = document.getElementById('searchInput').value.toUpperCase();
        const sortFilter = document.getElementById('sortFilter').value;
        const rows = document.querySelectorAll('tbody tr');

        rows.forEach(row => {
            const content = row.textContent.toUpperCase();
            const isVisible = content.includes(filter);
            row.classList.toggle('d-none', !isVisible);
        });

        // Sort by postal code
        if (sortFilter !== '') {
            const sortedRows = Array.from(rows).sort((a, b) => {
                const codeA = a.cells[2].textContent.toLowerCase();
                const codeB = b.cells[2].textContent.toLowerCase();
                if (sortFilter === 'asc') {
                    return codeA.localeCompare(codeB);
                } else {
                    return codeB.localeCompare(codeA);
                }
            });

            const parent = rows[0].parentNode;
            parent.innerHTML = '';
            sortedRows.forEach(row => {
                parent.appendChild(row);
            });
        }
    }

    document.getElementById('searchInput').addEventListener('keyup', filterTable);
    document.getElementById('sortFilter').addEventListener('change', filterTable);
</script>




    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.min.js"></script>
    <script>
    let cabinetNom = [];
    let cabinetNombreRdv = [];

    {% for cabinet in cabinets %}
        cabinetNom.push("{{ cabinet.nom }}");
        {% for nb in nbs %}
            cabinetNombreRdv.push("{{ nb }}");
        {% endfor %}
    {% endfor %}

    // Fonction pour générer des couleurs aléatoires
    function getRandomColor() {
        var letters = '0123456789ABCDEF';
        var color = '#';
        for (var i = 0; i < 6; i++) {
            color += letters[Math.floor(Math.random() * 15)];
        }
        return color;
    }

    // Création des données pour le graphique
    let chartData = {
        labels: cabinetNom,
        datasets: [{
            data: cabinetNombreRdv,
            backgroundColor: cabinetNom.map(name => getRandomColor())
        }]
    };

    // Configuration des options du graphique
    let chartOptions = {
        legend: { display: false },
        title: {
            display: true,
            text: "Statistiques des cabinets selon leurs nombre de rendez-vous"
        },
        scales: {
            yAxes: [{
                ticks: {
                    beginAtZero: true
                }
            }]
        }
        
    };

    // Création du graphique
    let ctx = document.getElementById('myChart').getContext('2d');
    let myChart = new Chart(ctx, {
        type: 'bar',
        data: chartData,
        options: chartOptions
    });
    </script>


{% endblock %}
